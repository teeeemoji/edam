{"version":3,"sources":["webpack:///advanced/write-template_zh.js","webpack:///./doc/advanced/write-template_zh.md"],"names":["webpackJsonp","693","module","exports","content","extra","_image-loader_"],"mappings":"AAAAA,cAAc,GAAG,KAEXC,IACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,++LACAC,OACAC","file":"advanced/write-template_zh.js","sourcesContent":["webpackJsonp([12,24],{\n\n/***/ 693:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<p>模板是 Edam 一个重要的概念，可以说核心就是模板处理。</p><p>流程如下：</p><ol><li>根据模板配置中的 <code>prompts</code> 数组字段来进行用户输入交互，获取用户输入；<br>使用 <a href=https://github.com/SBoudrias/Inquirer.js/>inquirer.js</a></li><li>模板配置中的 <code>root</code> 值，root 为模板文件夹的目录，默认为 <code>./template</code>；</li><li>读取 <code>root</code> 中的文件数据，忽略掉 <code>ignore</code> 字段中的文件，规则同 <code>.gitignore</code></li><li><p>分析配置中的 loader，对文件数据进行处理转换<br>关于 Loader 描述请转至<a href=/advanced/write-loader_zh>书写 Loader</a></p><ul><li><p>规则一（最高优先）：文件文本，如首行匹配如下任意一种语法：</p><pre><code class=\\\"hljs language-text\\\"data-query={} data-lang=text><span class=xml>// @loader $</span><span class=hljs-template-variable>{LOADER_NAME}</span><span class=xml>?$</span><span class=hljs-template-variable>{QUERY}</span><span class=xml>\\n/* @loader $</span><span class=hljs-template-variable>{LOADER_NAME}</span><span class=xml>?$</span><span class=hljs-template-variable>{QUERY}</span><span class=xml> */\\n# @loader $</span><span class=hljs-template-variable>{LOADER_NAME}</span><span class=xml>?$</span><span class=hljs-template-variable>{QUERY}</span><span class=xml>\\n<span class=hljs-comment>&lt;!-- @loader $</span></span><span class=hljs-template-variable>{LOADER_NAME}</span><span class=xml>?$</span><span class=hljs-template-variable>{QUERY}</span><span class=xml> --></span></code></pre><p>则将使用 LOADER_NAME 进行处理，LOADER_NAME 对应与 <code>loaders</code> 中定义的 loader</p></li><li>规则二：匹配 <code>mappers</code> 中的 <code>test</code>，第一个匹配到的 loader 将会被使用。</li></ul></li><li>得到转换后的文件目录结构，根据 <code>copy</code> <code>move</code> 进行文件的负责和移动；</li><li>写入输出文件夹后，触发 usefulHook，调用 post 钩子。</li></ol><h2 id=配置项><a href=#%E9%85%8D%E7%BD%AE%E9%A1%B9 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>配置项</h2><p>允许直接 exports 配置，或者 <code>module.exports = edam => ({ /*config*/ })</code></p><h3 id=prompts><a href=#prompts aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>prompts</h3><p>用户输入值的交互定义</p><ul><li><p>type: <code>[]</code></p><p>参考<a href=https://github.com/SBoudrias/Inquirer.js/>inquirer.js</a></p></li></ul><h3 id=process><a href=#process aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>process</h3><p><code>edam >= 2.0.1</code> 返回除去 <code>prompts</code> 配置以外的所有配置项</p><ul><li>type: <code>function</code></li></ul><p>如：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>{\\n  process(answer) {\\n    <span class=hljs-keyword>return</span> {\\n      <span class=hljs-attr>ignore</span>: [],\\n      <span class=hljs-attr>root</span>: <span class=hljs-string>'anc'</span>\\n    }\\n  }\\n}</code></pre><h3 id=root><a href=#root aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>root</h3><ul><li><p>type: <code>string</code></p><p>模板文件夹的目录，默认为 <code>./template</code> 或者 <code>answer => './template'</code></p></li></ul><h3 id=ignore><a href=#ignore aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>ignore</h3><p>忽略哪些文件</p><ul><li><p>type: <code>string[]</code></p><p>或者 <code>(answers) => []</code></p></li></ul><h3 id=variables><a href=#variables aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>variables</h3><ul><li><p>type <code>{}</code></p></li><li><p>example</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>{\\n  <span class=hljs-attr>date</span>: <span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>(),\\n  <span class=hljs-attr>val</span>: <span class=hljs-string>'abc'</span>\\n}\\n<span class=hljs-comment>// 或者</span>\\n(answers) => ({})</code></pre></li></ul><h3 id=hooks><a href=#hooks aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>hooks</h3><p>一些生命周期绑定的钩子，常用的是 <code>post</code> (在输出文件之后触发). 允许 function 或者 script</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>hooks: {\\n  <span class=hljs-string>'post'</span>: [<span class=hljs-string>'touch Readme.md'</span>]\\n}</code></pre><p>或者 <code>(answers) => ({})</code></p><h3 id=loaders-和-mappers><a href=#loaders-%E5%92%8C-mappers aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>loaders 和 mappers</h3><p>与 Loader 相关，请转至<a href=/advanced/write-loader_zh>书写 Loader</a>查看详情。</p><h3 id=move><a href=#move aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>move</h3><p>移动文件</p><ul><li>type: <code>{}</code></li></ul><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>{\\n  <span class=hljs-string>'package.json.js'</span>: <span class=hljs-string>'package.json'</span>,\\n  <span class=hljs-string>'test/**'</span>: <span class=hljs-string>'tests/'</span>,\\n  <span class=hljs-comment>// 特殊含义的占位符: [path] / [name] / [ext] / [base]</span>\\n  <span class=hljs-comment>// 如  root/abc.js -> </span>\\n  <span class=hljs-comment>//   path: `root/`</span>\\n  <span class=hljs-comment>//   name: `abc`</span>\\n  <span class=hljs-comment>//   ext: `.js`</span>\\n  <span class=hljs-comment>//   base: `abc.js`</span>\\n  <span class=hljs-string>'**/*.hbs'</span>: <span class=hljs-string>'[path][name].js'</span>\\n}</code></pre><p>或者 <code>(answers) => ({})</code></p><h3 id=copy><a href=#copy aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>copy</h3><p>复制文件，同 <code>move</code></p><h3 id=usefulhook><a href=#usefulhook aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>usefulHook</h3><p>一些常用的 hook 快捷方式</p><ul><li><p>gitInit</p><p>是否 <code>git init</code></p><ul><li>type: <code>boolean</code></li><li>default: <code>false</code></li></ul></li><li><p>installDependencies</p><p>是否安装 <code>package.json</code> 中的 Dependencies 使用 <code>npm</code> 或 <code>yarn</code> 由用户配置中的 <code>pull.npmClient</code> 指定</p><ul><li>type: <code>boolean</code></li><li>default: <code>false</code></li></ul></li><li><p>installDevDependencies</p><p>是否安装 <code>package.json</code> 中的 Dev Dependencies</p><ul><li>type: <code>boolean</code></li><li>default: <code>false</code></li></ul></li></ul><p>或者 <code>(answers) => ({})</code></p><h2 id=尾声><a href=#%E5%B0%BE%E5%A3%B0 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>尾声</h2><p>官方已经有的一个模板 repo: <a href=https://github.com/imcuttle/edam-vendor>edam-vendor</a> 可以参考。</p><p>利用不同的分支进行管理。</p>\",\n\t  \"extra\": {\n\t    \"_image-loader_\": []\n\t  }\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// advanced/write-template_zh.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<p>模板是 Edam 一个重要的概念，可以说核心就是模板处理。</p><p>流程如下：</p><ol><li>根据模板配置中的 <code>prompts</code> 数组字段来进行用户输入交互，获取用户输入；<br>使用 <a href=https://github.com/SBoudrias/Inquirer.js/>inquirer.js</a></li><li>模板配置中的 <code>root</code> 值，root 为模板文件夹的目录，默认为 <code>./template</code>；</li><li>读取 <code>root</code> 中的文件数据，忽略掉 <code>ignore</code> 字段中的文件，规则同 <code>.gitignore</code></li><li><p>分析配置中的 loader，对文件数据进行处理转换<br>关于 Loader 描述请转至<a href=/advanced/write-loader_zh>书写 Loader</a></p><ul><li><p>规则一（最高优先）：文件文本，如首行匹配如下任意一种语法：</p><pre><code class=\\\"hljs language-text\\\"data-query={} data-lang=text><span class=xml>// @loader $</span><span class=hljs-template-variable>{LOADER_NAME}</span><span class=xml>?$</span><span class=hljs-template-variable>{QUERY}</span><span class=xml>\\n/* @loader $</span><span class=hljs-template-variable>{LOADER_NAME}</span><span class=xml>?$</span><span class=hljs-template-variable>{QUERY}</span><span class=xml> */\\n# @loader $</span><span class=hljs-template-variable>{LOADER_NAME}</span><span class=xml>?$</span><span class=hljs-template-variable>{QUERY}</span><span class=xml>\\n<span class=hljs-comment>&lt;!-- @loader $</span></span><span class=hljs-template-variable>{LOADER_NAME}</span><span class=xml>?$</span><span class=hljs-template-variable>{QUERY}</span><span class=xml> --></span></code></pre><p>则将使用 LOADER_NAME 进行处理，LOADER_NAME 对应与 <code>loaders</code> 中定义的 loader</p></li><li>规则二：匹配 <code>mappers</code> 中的 <code>test</code>，第一个匹配到的 loader 将会被使用。</li></ul></li><li>得到转换后的文件目录结构，根据 <code>copy</code> <code>move</code> 进行文件的负责和移动；</li><li>写入输出文件夹后，触发 usefulHook，调用 post 钩子。</li></ol><h2 id=配置项><a href=#%E9%85%8D%E7%BD%AE%E9%A1%B9 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>配置项</h2><p>允许直接 exports 配置，或者 <code>module.exports = edam => ({ /*config*/ })</code></p><h3 id=prompts><a href=#prompts aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>prompts</h3><p>用户输入值的交互定义</p><ul><li><p>type: <code>[]</code></p><p>参考<a href=https://github.com/SBoudrias/Inquirer.js/>inquirer.js</a></p></li></ul><h3 id=process><a href=#process aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>process</h3><p><code>edam >= 2.0.1</code> 返回除去 <code>prompts</code> 配置以外的所有配置项</p><ul><li>type: <code>function</code></li></ul><p>如：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>{\\n  process(answer) {\\n    <span class=hljs-keyword>return</span> {\\n      <span class=hljs-attr>ignore</span>: [],\\n      <span class=hljs-attr>root</span>: <span class=hljs-string>'anc'</span>\\n    }\\n  }\\n}</code></pre><h3 id=root><a href=#root aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>root</h3><ul><li><p>type: <code>string</code></p><p>模板文件夹的目录，默认为 <code>./template</code> 或者 <code>answer => './template'</code></p></li></ul><h3 id=ignore><a href=#ignore aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>ignore</h3><p>忽略哪些文件</p><ul><li><p>type: <code>string[]</code></p><p>或者 <code>(answers) => []</code></p></li></ul><h3 id=variables><a href=#variables aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>variables</h3><ul><li><p>type <code>{}</code></p></li><li><p>example</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>{\\n  <span class=hljs-attr>date</span>: <span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>(),\\n  <span class=hljs-attr>val</span>: <span class=hljs-string>'abc'</span>\\n}\\n<span class=hljs-comment>// 或者</span>\\n(answers) => ({})</code></pre></li></ul><h3 id=hooks><a href=#hooks aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>hooks</h3><p>一些生命周期绑定的钩子，常用的是 <code>post</code> (在输出文件之后触发). 允许 function 或者 script</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>hooks: {\\n  <span class=hljs-string>'post'</span>: [<span class=hljs-string>'touch Readme.md'</span>]\\n}</code></pre><p>或者 <code>(answers) => ({})</code></p><h3 id=loaders-和-mappers><a href=#loaders-%E5%92%8C-mappers aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>loaders 和 mappers</h3><p>与 Loader 相关，请转至<a href=/advanced/write-loader_zh>书写 Loader</a>查看详情。</p><h3 id=move><a href=#move aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>move</h3><p>移动文件</p><ul><li>type: <code>{}</code></li></ul><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>{\\n  <span class=hljs-string>'package.json.js'</span>: <span class=hljs-string>'package.json'</span>,\\n  <span class=hljs-string>'test/**'</span>: <span class=hljs-string>'tests/'</span>,\\n  <span class=hljs-comment>// 特殊含义的占位符: [path] / [name] / [ext] / [base]</span>\\n  <span class=hljs-comment>// 如  root/abc.js -> </span>\\n  <span class=hljs-comment>//   path: `root/`</span>\\n  <span class=hljs-comment>//   name: `abc`</span>\\n  <span class=hljs-comment>//   ext: `.js`</span>\\n  <span class=hljs-comment>//   base: `abc.js`</span>\\n  <span class=hljs-string>'**/*.hbs'</span>: <span class=hljs-string>'[path][name].js'</span>\\n}</code></pre><p>或者 <code>(answers) => ({})</code></p><h3 id=copy><a href=#copy aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>copy</h3><p>复制文件，同 <code>move</code></p><h3 id=usefulhook><a href=#usefulhook aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>usefulHook</h3><p>一些常用的 hook 快捷方式</p><ul><li><p>gitInit</p><p>是否 <code>git init</code></p><ul><li>type: <code>boolean</code></li><li>default: <code>false</code></li></ul></li><li><p>installDependencies</p><p>是否安装 <code>package.json</code> 中的 Dependencies 使用 <code>npm</code> 或 <code>yarn</code> 由用户配置中的 <code>pull.npmClient</code> 指定</p><ul><li>type: <code>boolean</code></li><li>default: <code>false</code></li></ul></li><li><p>installDevDependencies</p><p>是否安装 <code>package.json</code> 中的 Dev Dependencies</p><ul><li>type: <code>boolean</code></li><li>default: <code>false</code></li></ul></li></ul><p>或者 <code>(answers) => ({})</code></p><h2 id=尾声><a href=#%E5%B0%BE%E5%A3%B0 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>尾声</h2><p>官方已经有的一个模板 repo: <a href=https://github.com/imcuttle/edam-vendor>edam-vendor</a> 可以参考。</p><p>利用不同的分支进行管理。</p>\",\n  \"extra\": {\n    \"_image-loader_\": []\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/picidae/lib/lib/loaders/markdown-loader!./doc/advanced/write-template_zh.md\n// module id = 693\n// module chunks = 12"],"sourceRoot":""}